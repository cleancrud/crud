// Code generated by bcurd

package xsql

import (
	"context"
	"database/sql"
	"errors"

	"time"
)

type Entity interface {
	Values() []any
	GetAutoIncrPk() int64
	SetAutoIncrPk(id int64)
	ScanDst(aa any, columns []string) []any
	Columns() []string
	ColumnsSet() map[string]struct{}
	NewPtr() any
	IsNil() bool
}

// InsertExecutor InsertExecutor
type InsertExecutor[T Entity] struct {
	eq      ExecQuerier
	builder *InsertBuilder
	items   []T
	upsert  bool
	timeout time.Duration
	a       T
}

// Create Create
func NewInsertExecutor[T Entity](eq ExecQuerier, table string, dialect string) *InsertExecutor[T] {
	return &InsertExecutor[T]{
		builder: Dialect(dialect).Insert(table),
		eq:      eq,
	}
}

// Timeout SetTimeout
func (in *InsertExecutor[T]) Timeout(t time.Duration) *InsertExecutor[T] {
	in.timeout = t
	return in
}

// SetItem SetItem move outside
func (in *InsertExecutor[T]) SetItems(a ...T) *InsertExecutor[T] {
	in.items = append(in.items, a...)
	return in
}

// Upsert update all field when insert conflict
func (in *InsertExecutor[T]) Upsert(ctx context.Context) (int64, error) {
	in.upsert = true
	return in.Save(ctx)
}

// Save Save one or many records set by SetUser method
// if insert a record , the LastInsertId  will be setted on the struct's  PrimeKey field
// if insert many records , every struct's PrimeKey field will not be setted
// return number of RowsAffected or error
func (in *InsertExecutor[T]) Save(ctx context.Context) (int64, error) {
	if len(in.items) == 0 {
		return 0, errors.New("please set a item")
	}

	in.builder.Columns(in.a.Columns()...)
	if in.upsert {
		in.builder.OnConflict(ResolveWithNewValues())
	}
	for _, a := range in.items {
		if a.IsNil() {
			return 0, errors.New("can not insert a nil item")
		}
		in.builder.Values(a.Values()...)
	}
	_, ctx, cancel := Shrink(ctx, in.timeout)
	defer cancel()
	ins, args := in.builder.Query()
	result, err := in.eq.ExecContext(ctx, ins, args...)
	if err != nil {
		return 0, err
	}

	lastInsertId, err := result.LastInsertId()
	if err != nil {
		return 0, err
	}
	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return rowsAffected, err
	}
	if lastInsertId > 0 && rowsAffected > 0 {
		for _, v := range in.items {
			if v.GetAutoIncrPk() > 0 {
				continue
			}
			v.SetAutoIncrPk(lastInsertId)
			lastInsertId++
		}
	}

	return result.RowsAffected()
}

// DeleteExecutor DeleteExecutor
type DeleteExecutor[T Entity] struct {
	builder *DeleteBuilder
	eq      ExecQuerier
	timeout time.Duration
}

// Deleter Deleter
func NewDeleteExecutor[T Entity](eq ExecQuerier, table string, dialect string) *DeleteExecutor[T] {
	return &DeleteExecutor[T]{
		builder: Dialect(dialect).Delete(table),
		eq:      eq,
	}
}

// Timeout SetTimeout
func (d *DeleteExecutor[T]) Timeout(t time.Duration) *DeleteExecutor[T] {
	d.timeout = t
	return d
}

// Where  UserWhere
func (d *DeleteExecutor[T]) Where(p ...WhereFunc) *DeleteExecutor[T] {
	s := &Selector{}
	for _, v := range p {
		v(s)
	}
	d.builder = d.builder.Where(s.P())
	return d
}

// Exec Exec
func (d *DeleteExecutor[T]) Exec(ctx context.Context) (int64, error) {
	_, ctx, cancel := Shrink(ctx, d.timeout)
	defer cancel()
	del, args := d.builder.Query()
	res, err := d.eq.ExecContext(ctx, del, args...)
	if err != nil {
		return 0, err
	}
	return res.RowsAffected()
}

// SelectExecutor SelectExecutor
type SelectExecutor[T Entity] struct {
	builder *Selector
	eq      ExecQuerier
	timeout time.Duration
	a       T
}

// Find Find
func NewSelectExecutor[T Entity](eq ExecQuerier, table string, dialect string) *SelectExecutor[T] {

	sel := &SelectExecutor[T]{
		builder: Dialect(dialect).Select(),
		eq:      eq,
	}
	sel.builder = sel.builder.From(Table(table))
	return sel
}

// Timeout SetTimeout
func (s *SelectExecutor[T]) Timeout(t time.Duration) *SelectExecutor[T] {
	s.timeout = t
	return s
}

// Select Select
func (s *SelectExecutor[T]) Select(columns ...string) *SelectExecutor[T] {
	s.builder.Select(columns...)
	return s
}

// Count Count
func (s *SelectExecutor[T]) Count(columns ...string) *SelectExecutor[T] {
	s.builder.Count(columns...)
	return s
}

// Where where
func (s *SelectExecutor[T]) Where(p ...WhereFunc) *SelectExecutor[T] {
	sel := &Selector{}
	for _, v := range p {
		v(sel)
	}
	s.builder = s.builder.Where(sel.P())
	return s
}

func (s *SelectExecutor[T]) WhereP(ps ...*Predicate) *SelectExecutor[T] {
	for _, v := range ps {
		s.builder.Where(v)
	}
	return s
}

// Offset Offset
func (s *SelectExecutor[T]) Offset(offset int32) *SelectExecutor[T] {
	s.builder = s.builder.Offset(int(offset))
	return s
}

// Limit Limit
func (s *SelectExecutor[T]) Limit(limit int32) *SelectExecutor[T] {
	s.builder = s.builder.Limit(int(limit))
	return s
}

// OrderDesc OrderDesc
func (s *SelectExecutor[T]) OrderDesc(field string) *SelectExecutor[T] {
	s.builder = s.builder.OrderBy(Desc(field))
	return s
}

// OrderAsc OrderAsc
func (s *SelectExecutor[T]) OrderAsc(field string) *SelectExecutor[T] {
	s.builder = s.builder.OrderBy(Asc(field))
	return s
}

// ForceIndex ForceIndex  FORCE INDEX (`index_name`)
func (s *SelectExecutor[T]) ForceIndex(indexName ...string) *SelectExecutor[T] {
	s.builder.For(LockUpdate)
	return s
}

// GroupBy GroupBy
func (s *SelectExecutor[T]) GroupBy(fields ...string) *SelectExecutor[T] {
	s.builder.GroupBy(fields...)
	return s
}

// Having Having
func (s *SelectExecutor[T]) Having(p *Predicate) *SelectExecutor[T] {
	s.builder.Having(p)
	return s
}

// Slice Slice scan query result to slice
func (s *SelectExecutor[T]) Slice(ctx context.Context, dstSlice interface{}) error {
	_, ctx, cancel := Shrink(ctx, s.timeout)
	defer cancel()
	sqlstr, args := s.builder.Query()
	q, err := s.eq.QueryContext(ctx, sqlstr, args...)
	if err != nil {
		return err
	}
	defer q.Close()
	return ScanSlice(q, dstSlice)
}

// One One
func (s *SelectExecutor[T]) One(ctx context.Context) (T, error) {
	s.builder.Limit(1)
	results, err := s.All(ctx)
	if err != nil {
		return s.a, err
	}
	if len(results) <= 0 {
		return s.a, sql.ErrNoRows
	}
	return results[0], nil
}

// Int64 count or select only one int64 field
func (s *SelectExecutor[T]) Int64(ctx context.Context) (int64, error) {
	_, ctx, cancel := Shrink(ctx, s.timeout)
	defer cancel()
	return Int64(ctx, s.builder, s.eq)
}

// Int64s return int64 slice
func (s *SelectExecutor[T]) Int64s(ctx context.Context) ([]int64, error) {
	_, ctx, cancel := Shrink(ctx, s.timeout)
	defer cancel()
	return Int64s(ctx, s.builder, s.eq)
}

// String  String
func (s *SelectExecutor[T]) String(ctx context.Context) (string, error) {
	_, ctx, cancel := Shrink(ctx, s.timeout)
	defer cancel()
	return String(ctx, s.builder, s.eq)
}

// Strings return string slice
func (s *SelectExecutor[T]) Strings(ctx context.Context) ([]string, error) {
	_, ctx, cancel := Shrink(ctx, s.timeout)
	defer cancel()
	return Strings(ctx, s.builder, s.eq)
}

func (s *SelectExecutor[T]) selectCheck(columns []string) error {
	set := s.a.ColumnsSet()
	for _, v := range columns {
		if _, ok := set[v]; !ok {
			return errors.New("User not have field:" + v)
		}
	}
	return nil
}

// All  return all results
func (s *SelectExecutor[T]) All(ctx context.Context) ([]T, error) {
	var selectedColumns []string
	if s.builder.NoColumnSelected() {
		s.builder.Select(s.a.Columns()...)
		selectedColumns = s.a.Columns()
	} else {
		selectedColumns = s.builder.SelectedColumns()
		if err := s.selectCheck(selectedColumns); err != nil {
			return nil, err
		}
	}
	_, ctx, cancel := Shrink(ctx, s.timeout)
	defer cancel()
	sqlstr, args := s.builder.Query()
	q, err := s.eq.QueryContext(ctx, sqlstr, args...)
	if err != nil {
		return nil, err
	}
	defer q.Close()
	var result []T
	for q.Next() {
		x := s.a.NewPtr()
		dst := s.a.ScanDst(x, selectedColumns)
		if err := q.Scan(dst...); err != nil {
			return nil, err
		}
		result = append(result, x.(T))
	}
	if q.Err() != nil {
		return nil, q.Err()
	}
	return result, nil
}

// UpdateExecutor UpdateExecutor
type UpdateExecutor[T Entity] struct {
	builder *UpdateBuilder
	eq      ExecQuerier
	timeout time.Duration
}

// Update return a UpdateExecutor
func NewUpdateExecutor[T Entity](eq ExecQuerier, table string, dialect string) *UpdateExecutor[T] {
	return &UpdateExecutor[T]{
		eq:      eq,
		builder: Dialect(dialect).Update(table),
	}
}

// Timeout SetTimeout
func (u *UpdateExecutor[T]) Timeout(t time.Duration) *UpdateExecutor[T] {
	u.timeout = t
	return u
}

// Where Where
func (u *UpdateExecutor[T]) Where(p ...WhereFunc) *UpdateExecutor[T] {
	s := &Selector{}
	for _, v := range p {
		v(s)
	}
	u.builder = u.builder.Where(s.P())
	return u
}

// Set
func (u *UpdateExecutor[T]) Set(name string, arg any) *UpdateExecutor[T] {
	u.builder.Set(name, arg)
	return u
}

func (u *UpdateExecutor[T]) Add(name string, arg any) *UpdateExecutor[T] {
	u.builder.Add(name, arg)
	return u
}

// Save do a update statment  if tx can without context
func (u *UpdateExecutor[T]) Save(ctx context.Context) (int64, error) {
	_, ctx, cancel := Shrink(ctx, u.timeout)
	defer cancel()
	up, args := u.builder.Query()
	result, err := u.eq.ExecContext(ctx, up, args...)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
