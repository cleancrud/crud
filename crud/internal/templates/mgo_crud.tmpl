package {{.Package}}


import (
	
	{{if .ImportTime}}
	"time"
	{{end}}
	"github.com/cleancrud/crud/mgo"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type {{.GoName}} struct{
    {{- range .Fields}}
   		{{.GoName}}  {{.GoType}} {{.Tag}}
    {{- end }}
}

func (u *{{.GoName}}) GetObjectID() (primitive.ObjectID, string) {
	if u.IsNil() {
		return primitive.NilObjectID, {{.ObjectIDField.GoName}}
	}
	return u.{{.ObjectIDField.GoName}}, {{.ObjectIDField.GoName}}
}

func (u *{{.GoName}}) SetObjectID(id primitive.ObjectID) {
	if u.IsNil() {
		return
	}
	u.{{.ObjectIDField.GoName}} = id
}

func (u *{{.GoName}}) IsNil() bool {
	return u == nil
}

{{$tableName := .GoName}}
const(
	tableName = "{{.Name}}"
	{{- range .Fields}}
	{{.GoName}} = "{{.Name}}"
	{{- end }}

)

func Collection(db *mongo.Database) *mongo.Collection {
	return db.Collection(tableName)
}

func Create(col *mongo.Collection) *mgo.InsertExecutor[*{{.GoName}}] {
	return mgo.NewInsertExecutor[*{{.GoName}}](col)
}

func Delete(col *mongo.Collection) *mgo.DeleteExecutor[*{{.GoName}}] {
	return mgo.NewDeleteExecutor[*{{.GoName}}](col)
}

func Find(col *mongo.Collection) *mgo.FinderExecutor[*{{.GoName}}] {
	return mgo.NewFinderExecutor[*{{.GoName}}](col)
}

func Update(col *mongo.Collection) *Updater {
	return &Updater{mgo.NewUpdateExecutor[*{{.GoName}}](col)}
}

type Updater struct {
	*mgo.UpdateExecutor[*{{.GoName}}]
}

{{- range .Fields}}
func (u *Updater) Set{{.GoName}}(a  {{.GoType}}) *Updater {
	u.UpdateExecutor.Set({{.GoName}}, a)
	return u
}
{{- end }}
